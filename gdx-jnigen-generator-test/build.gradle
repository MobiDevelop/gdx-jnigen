plugins {
    id "com.badlogicgames.jnigen.jnigen-gradle"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testRuntimeOnly fileTree(dir: file("build/libs/"), include: '*natives-desktop.jar')
    testImplementation project(path: ":jnigen-runtime")
    testImplementation project(path: ":jnigen-runtime", configuration: "archives")
}


task copyTestFiles(type: Copy) {
    from("src/test/resources/")
    into("jni/")
}

test {
    // TODO: Figure out how to force build natives?
//    dependsOn(":jnigen-generator-test:jnigenJarNativesDesktop")
    useJUnitPlatform()
    outputs.upToDateWhen {false}
}

jnigen {
    sharedLibName = "test-natives"

    nativeCodeGenerator {
        it.sourceSet = sourceSets.named("test").get()
    }

    all {
        cFlags += " -std=c11 -fexceptions "
        cppFlags += " -std=c++11 -fexceptions "
    }

    generator {
        outputPath = file("src/test/java")
        basePackage = "com.badlogic.jnigen.generated"
        fileToParse = "test_data.h"
        options = ["-I" + file("src/test/resources/").absolutePath]
    }

    addLinux(x32, ARM)
    addLinux(x64, x86)
    addLinux(x64, ARM)
    addLinux(x64, RISCV)
    addMac(x64, x86)
    addMac(x64, ARM)
    addWindows(x32, x86)
    addWindows(x64, x86)
    //add(Windows, x64, ARM)
    addAndroid() {
        linkerFlags += " -stdlib=libc++\nAPP_STL := c++_shared "
    }
    addIOS()
}

tasks.named("jnigen").get().dependsOn(compileTestJava)
tasks.named("jnigen").get().dependsOn(copyTestFiles)

// TODO: FIGURE OUT WHY THIS MAKES THE JVM CRASH AFTER A WHILE
//compileTestJava.dependsOn(":gdx-jnigen-generator-test:jnigenGenerateBindings")

// TODO: FIGURE OUT HOW TO ENFORCE ORDER
//jnigenJarNativesDesktop.mustRunAfter jnigenBuild

eclipse {
    project {
        name = "gdx-jnigen-generator-test"
    }
}